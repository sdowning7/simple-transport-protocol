#!/usr/bin/env python3

import sys
import socket
import datetime
import json

MSG_SIZE = 1500
TIMEOUT = 10

# state
"""
This is the map that will keep track of the packets we have received that are out of order. The map will be from the
sequence number we receive being the key and the value being the data content of the packet. Therefore the key will
correspond to the *first* byte of the message. This is to make implementing checkNextPacket easier.
"""
received = {}
"""
The current sequence number up to which we have already written to sdtout. Therefore the next packet we want to write
should have a sequence number that equals this. 
"""
seqn = 0


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()

"""
Check memory and write all possible packets to stdout that we can while maintaining order. 
"""
def checkNextPacket():
    # need to define seqn as global or it complains
    global seqn
    while True:
        # if we haven't received the next packet yet - break
        if seqn not in received:
            break
        # write the next packets data to stdout
        sys.stdout.write(received[seqn])
        # grab length of the data
        data_len = len(received[seqn])
        # we can delete the sequence number from data now
        received.pop(seqn)
        # increment sequence number to point to the next packet we need
        seqn = seqn + data_len

def main():
    # required statement
    global seqn
    # Bind to localhost and an ephemeral port
    udp_ip = "127.0.0.1"
    udp_port = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((udp_ip, udp_port))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    udp_port = sock.getsockname()[1]
    log(f"[bound] {udp_port}")

    # Now listen for packets
    while True:
        result = sock.recvfrom(MSG_SIZE)

        # If nothing is ready, we hit the timeout
        if result:
            (data, addr) = result
            data = data.decode('ascii')

            try:
                decoded = json.loads(data)

                # If the EOF flag is set, exit
                if decoded['eof']:
                    log("[completed]")
                    sys.exit(0)

                # If there is data, we accept it and print it out
                if decoded['data']:
                    log(f"[recv data] {decoded['sequence']} ({len(decoded['data'])}) ACCEPTED (in-order)")
                    # grab sequence number as int
                    packet_seqn = int(decoded['sequence'])
                    # if the packet is the next one
                    if seqn == packet_seqn:
                        # write it stdout and increment sequence number
                        sys.stdout.write(decoded['data'])
                        seqn = seqn + len(decoded['data'])
                        # check memory to see if we have the next packet stored
                        checkNextPacket()
                    # if packet is out of order store for later use
                    # HOWEVER - if packet seqn is smaller than our current seqn or it's already in received then we
                    # have a duplicate packet and can ignore it - still want to send ack though
                    if packet_seqn > seqn and packet_seqn not in received:
                        received[packet_seqn] = decoded['data']

                # Send back an ack to the sender
                msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
                log("ABOUT TO SEND " + msg)
                if sock.sendto(msg.encode('ascii'), addr) < len(msg):
                    log("[error] unable to fully send packet")

            except (ValueError, KeyError, TypeError) as exc:
                log("[recv corrupt packet]")
                raise exc
        else:
            log("[error] timeout")
            sys.exit(-1)


if __name__ == '__main__':
    main()
